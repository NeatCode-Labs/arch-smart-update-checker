name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  dco-check:
    name: DCO Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Check DCO Sign-offs
        run: |
          echo "Checking DCO sign-offs..."
          
          # Get all commits in this PR or push
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            COMMITS=$(git rev-list ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }})
          else
            COMMITS=$(git rev-list HEAD~1..HEAD)
          fi
          
          MISSING_DCO=0
          for commit in $COMMITS; do
            if ! git show -s --format=%B $commit | grep -q "^Signed-off-by: "; then
              echo "Missing DCO sign-off in commit: $(git show -s --format='%h %s' $commit)"
              MISSING_DCO=$((MISSING_DCO + 1))
            fi
          done
          
          if [ $MISSING_DCO -gt 0 ]; then
            echo "❌ Found $MISSING_DCO commits without DCO sign-off"
            echo ""
            echo "Please sign your commits with: git commit -s"
            echo "Or amend the last commit with: git commit --amend -s"
            exit 1
          fi
          
          echo "✅ All commits have proper DCO sign-offs"

  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Check SPDX Headers
        run: |
          echo "Checking for SPDX-License-Identifier headers..."
          missing_headers=0
          for file in $(find src -name "*.py"); do
            if ! grep -q "SPDX-License-Identifier: GPL-3.0-or-later" "$file"; then
              echo "Missing SPDX header in: $file"
              missing_headers=$((missing_headers + 1))
            fi
          done
          if [ $missing_headers -gt 0 ]; then
            echo "Found $missing_headers files missing SPDX headers"
            exit 1
          fi
          echo "All Python files have proper SPDX headers ✓"
      
      - name: Verify GPL License
        run: |
          if ! grep -q "GNU GENERAL PUBLIC LICENSE" LICENSE; then
            echo "LICENSE file does not contain GPL license"
            exit 1
          fi
          echo "LICENSE file verified ✓"

  build:
    name: Build and Test
    runs-on: ubuntu-latest
    timeout-minutes: 30  # Add overall job timeout
    needs: [dco-check, license-check]
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -e .[dev]
          sudo apt-get update && sudo apt-get install -y python3-tk
      
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      
      - name: Type check with mypy
        run: |
          mypy src/
      
      - name: Test with pytest
        timeout-minutes: 5
        run: |
          export CI=true
          export ASUC_HEADLESS=1
          pytest tests/ -v --tb=short --timeout=60 --timeout-method=thread --cov=src --cov-report=xml --cov-report=term-missing -x -m "not gui" || pytest tests/ -v --tb=short --timeout=30 --timeout-method=thread --cov=src --cov-report=xml --cov-report=term-missing -x --maxfail=3
      

      
      - name: Upload coverage reports
        if: matrix.python-version == '3.11'  
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false 