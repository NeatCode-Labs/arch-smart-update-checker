name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  dco-check:
    name: DCO Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Check DCO Sign-offs
        run: |
          echo "Checking DCO sign-offs..."
          
          # Get all commits in this PR or push
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            COMMITS=$(git rev-list ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }})
          else
            COMMITS=$(git rev-list HEAD~1..HEAD)
          fi
          
          MISSING_DCO=0
          for commit in $COMMITS; do
            if ! git show -s --format=%B $commit | grep -q "^Signed-off-by: "; then
              echo "Missing DCO sign-off in commit: $(git show -s --format='%h %s' $commit)"
              MISSING_DCO=$((MISSING_DCO + 1))
            fi
          done
          
          if [ $MISSING_DCO -gt 0 ]; then
            echo "‚ùå Found $MISSING_DCO commits without DCO sign-off"
            echo ""
            echo "Please sign your commits with: git commit -s"
            echo "Or amend the last commit with: git commit --amend -s"
            exit 1
          fi
          
          echo "‚úÖ All commits have proper DCO sign-offs"

  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Check SPDX Headers
        run: |
          echo "Checking for SPDX-License-Identifier headers..."
          missing_headers=0
          for file in $(find src -name "*.py"); do
            if ! grep -q "SPDX-License-Identifier: GPL-3.0-or-later" "$file"; then
              echo "Missing SPDX header in: $file"
              missing_headers=$((missing_headers + 1))
            fi
          done
          if [ $missing_headers -gt 0 ]; then
            echo "Found $missing_headers files missing SPDX headers"
            exit 1
          fi
          echo "All Python files have proper SPDX headers ‚úì"
      
      - name: Verify GPL License
        run: |
          if ! grep -q "GNU GENERAL PUBLIC LICENSE" LICENSE; then
            echo "LICENSE file does not contain GPL license"
            exit 1
          fi
          echo "LICENSE file verified ‚úì"

  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python
          queries: security-and-quality
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:python"
      
      - name: Run Bandit Security Scan
        run: |
          pip install bandit
          # Run bandit with comprehensive checks
          bandit -r src/ -f json -o bandit-report.json || true
          
          # Parse and display results
          if [ -f bandit-report.json ]; then
            echo "=== Bandit Security Scan Results ==="
            python3 << 'EOF'
          import json
          with open('bandit-report.json', 'r') as f:
              data = json.load(f)
              print(f'Total issues: {len(data["results"])}')
              for issue in data['results']:
                  severity = issue.get('severity', 'UNKNOWN')
                  test_name = issue.get('test_name', 'Unknown Test')
                  filename = issue.get('filename', 'Unknown File')
                  line_number = issue.get('line_number', 'Unknown Line')
                  print(f"{severity}: {test_name} - {filename}:{line_number}")
          EOF
            
            # Fail if high severity issues found
            HIGH_SEVERITY=$(python -c "import json; data=json.load(open('bandit-report.json')); print(sum(1 for r in data['results'] if r.get('severity', '') == 'HIGH'))")
            if [ "$HIGH_SEVERITY" -gt 0 ]; then
              echo "‚ùå Found $HIGH_SEVERITY high severity security issues"
              exit 1
            fi
          fi

  build:
    name: Build and Test
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [dco-check, license-check, security-scan]
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -e .[dev]
          sudo apt-get update && sudo apt-get install -y python3-tk
      
      - name: Scan for vulnerable dependencies
        run: |
          echo "=== Dependency Vulnerability Scan ==="
          pip install pip-audit
          
          # Run pip-audit with JSON output for better parsing
          pip-audit --desc --format json --output pip-audit-report.json || true
          
          # Parse and display results
          if [ -f pip-audit-report.json ]; then
            python3 << 'EOF'
          import json
          import sys
          
          with open('pip-audit-report.json', 'r') as f:
              data = json.load(f)
              vulnerabilities = data.get('vulnerabilities', [])
              
              if not vulnerabilities:
                  print("‚úÖ No known vulnerabilities in dependencies")
                  sys.exit(0)
              
              print(f"‚ùå Found {len(vulnerabilities)} vulnerable dependencies")
              
              # Categorize by severity
              high_severity = []
              medium_severity = []
              low_severity = []
              
              for vuln in vulnerabilities:
                  name = vuln.get('name', 'Unknown')
                  version = vuln.get('version', 'Unknown')
                  vulns = vuln.get('vulns', [])
                  
                  for v in vulns:
                      severity = v.get('severity', 'UNKNOWN').upper()
                      id = v.get('id', 'Unknown')
                      desc = v.get('description', '')[:100]
                      
                      entry = f"{name}=={version}: {id} - {desc}..."
                      
                      if severity in ['CRITICAL', 'HIGH']:
                          high_severity.append(entry)
                      elif severity == 'MEDIUM':
                          medium_severity.append(entry)
                      else:
                          low_severity.append(entry)
              
              # Display vulnerabilities by severity
              if high_severity:
                  print("\nüö® HIGH/CRITICAL Severity:")
                  for item in high_severity:
                      print(f"  - {item}")
              
              if medium_severity:
                  print("\n‚ö†Ô∏è  MEDIUM Severity:")
                  for item in medium_severity:
                      print(f"  - {item}")
              
              if low_severity:
                  print("\nüìå LOW Severity:")
                  for item in low_severity:
                      print(f"  - {item}")
              
              # Fail build on high severity vulnerabilities
              if high_severity:
                  print(f"\n‚ùå Build failed due to {len(high_severity)} high/critical severity vulnerabilities")
                  sys.exit(1)
              else:
                  print("\n‚ö†Ô∏è  WARNING: Please update vulnerable dependencies")
                  sys.exit(0)
          EOF
          fi
      
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      
      - name: Type check with mypy
        run: |
          mypy src/
      
      - name: Test with pytest
        timeout-minutes: 5
        run: |
          export CI=true
          export ASUC_HEADLESS=1
          pytest tests/ -v --tb=short --timeout=60 --timeout-method=thread --cov=src --cov-report=xml --cov-report=term-missing -x -m "not gui" || pytest tests/ -v --tb=short --timeout=30 --timeout-method=thread --cov=src --cov-report=xml --cov-report=term-missing -x --maxfail=3
      
      - name: Generate SBOM
        if: matrix.python-version == '3.11'
        run: |
          echo "=== Generating Software Bill of Materials (SBOM) ==="
          pip install cyclonedx-bom
          
          # Generate SBOM in multiple formats
          pip freeze > requirements.txt
          cyclonedx-py requirements -o sbom.json
          cyclonedx-py requirements -o sbom.xml -F xml
          
          echo "‚úÖ SBOM generated successfully"
          
          # Display summary
          echo "=== SBOM Summary ==="
          python3 << 'EOF'
          import json
          with open('sbom.json', 'r') as f:
              data = json.load(f)
              print(f"Total components: {len(data.get('components', []))}")
              print(f"SBOM Format: {data.get('bomFormat', 'Unknown')}")
              print(f"Spec Version: {data.get('specVersion', 'Unknown')}")
          EOF
      
      - name: Upload SBOM artifacts
        if: matrix.python-version == '3.11'
        uses: actions/upload-artifact@v4
        with:
          name: sbom-artifacts
          path: |
            sbom.json
            sbom.xml
          retention-days: 30
      
      - name: Upload coverage reports
        if: matrix.python-version == '3.11'  
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false 